# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2poXYkHgHbCpcoTq1SjkIH212GGKxj1
"""

import pandas as pd
import numpy as np
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics import mean_squared_error
import json

# Step 1: Memuat data dari .json
with open('guide_ratings_reviews.json', 'r') as file:
    data = json.load(file)

# Mengonversi data JSON ke DataFrame
df = pd.DataFrame(data)

# Menampilkan beberapa data untuk memastikan struktur
print("Data awal: ")
print(df.head())

# Step 2: Membuat matriks pengguna vs panduan
# Matriks pengguna (UserID) vs panduan (GuideID) berdasarkan Rating
matrix = df.pivot(index='UserID', columns='GuideID', values='Rating').fillna(0)

# Menampilkan matriks untuk memeriksa hasil
print(f'Matrix pengguna vs panduan: \n{matrix.head()}')

# Step 3: Membagi data menjadi data latih (train) dan data uji (test)
train_matrix = matrix.iloc[:-1]  # Gunakan semua kecuali baris terakhir untuk training
test_matrix = matrix.iloc[-1:]  # Gunakan baris terakhir untuk testing

# Menampilkan bentuk matriks latih dan uji
print(f'Train matrix shape: {train_matrix.shape}')
print(f'Test matrix shape: {test_matrix.shape}')

# Step 4: Matrix Factorization dengan SVD
svd = TruncatedSVD(n_components=2, random_state=42)  # Tentukan komponen yang sesuai
svd.fit(train_matrix)  # Latih dengan data pelatihan

# Step 5: Prediksi hasil pada data uji
predicted_matrix = svd.transform(test_matrix)  # Transformasi data uji menggunakan model yang sudah dilatih

# Mengembalikan hasil prediksi ke bentuk semula
predicted_matrix_full = svd.inverse_transform(predicted_matrix)  # Mengembalikan hasil ke bentuk semula

# Step 6: Flatten data dan hasil prediksi untuk perhitungan RMSE
test_matrix_flat = test_matrix.values.flatten()  # Rata-rata test matrix
predicted_matrix_flat = predicted_matrix_full.flatten()  # Rata-rata prediksi matrix

# Step 7: Menghitung RMSE (Root Mean Squared Error)
if test_matrix_flat.shape == predicted_matrix_flat.shape:
    rmse = np.sqrt(mean_squared_error(test_matrix_flat, predicted_matrix_flat))
    print(f'RMSE untuk model SVD: {rmse}')
else:
    print(f'Test and prediction matrices have different shapes. Test shape: {test_matrix_flat.shape}, Prediction shape: {predicted_matrix_flat.shape}')

import pickle
from sklearn.decomposition import TruncatedSVD

# Misalkan model SVD sudah dilatih dengan matrix_train
# Latih model SVD
model = TruncatedSVD(n_components=5, random_state=42)
model.fit(train_matrix)

# Simpan model SVD ke file menggunakan pickle
with open('svd_model.pkl', 'wb') as f:
    pickle.dump(model, f)

print("Model SVD telah disimpan sebagai 'svd_model.pkl'")

